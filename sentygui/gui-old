#include "imgui.h"
#include "imgui_impl_glfw.h"
#include "imgui_impl_opengl2.h"
#include <stdio.h>
#ifdef __APPLE__
#define GL_SILENCE_DEPRECATION
#endif
#include <GLFW/glfw3.h>

// [Win32] Our example includes a copy of glfw3.lib pre-compiled with VS2010 to maximize ease of testing and compatibility with old VS compilers.
// To link with VS2010-era libraries, VS2015+ requires linking with legacy_stdio_definitions.lib, which we do using this pragma.
// Your own project should not be affected, as you are likely to link with a newer binary of GLFW that is adequate for your version of Visual Studio.
#if defined(_MSC_VER) && (_MSC_VER >= 1900) && !defined(IMGUI_DISABLE_WIN32_FUNCTIONS)
#pragma comment(lib, "legacy_stdio_definitions")
#endif

static void glfw_error_callback(int error, const char* description) {
    fprintf(stderr, "GLFW Error %d: %s\n", error, description);
}

#include <iostream>
// #ifdef __APPLE__
// #define GL_SILENCE_DEPRECATION
// #endif
#include "gui.h"


using namespace std;

GUI::GUI(AppModel *appModel) : appModel{appModel} {
    appModel->addListener(this);
    glfwSetErrorCallback(glfw_error_callback);
    if (!glfwInit()) {
        std::cerr << "Failed to initialize GLFW\n";
        return;
    }

    // Create window with graphics context
    GLFWwindow* window = glfwCreateWindow(1280, 720, "Dear ImGui GLFW+OpenGL2 example", NULL, NULL);
    if (window == NULL) {
        std::cerr << "Failed to create GLFW window\n";
        return;
    }
    glfwMakeContextCurrent(window);
    glfwSwapInterval(1); // Enable vsync

    // Setup Dear ImGui context
    IMGUI_CHECKVERSION();
    ImGui::CreateContext();
    ImGuiIO& io = ImGui::GetIO(); (void)io;
    io.ConfigFlags |= ImGuiConfigFlags_NavEnableKeyboard;     // Enable Keyboard Controls
    io.ConfigFlags |= ImGuiConfigFlags_NavEnableGamepad;      // Enable Gamepad Controls

    // Setup Dear ImGui style
    ImGui::StyleColorsDark();
    //ImGui::StyleColorsLight();
    
    // Setup Platform/Renderer backends
    ImGui_ImplGlfw_InitForOpenGL(window, true);
    ImGui_ImplOpenGL2_Init();

    ImVec4 clear_color = ImVec4(0.45f, 0.55f, 0.60f, 1.00f);
    while (!glfwWindowShouldClose(window)) {
        // Poll and handle events (inputs, window resize, etc.)
        // You can read the io.WantCaptureMouse, io.WantCaptureKeyboard flags to tell if dear imgui wants to use your inputs.
        // - When io.WantCaptureMouse is true, do not dispatch mouse input data to your main application, or clear/overwrite your copy of the mouse data.
        // - When io.WantCaptureKeyboard is true, do not dispatch keyboard input data to your main application, or clear/overwrite your copy of the keyboard data.
        // Generally you may always pass all inputs to dear imgui, and hide them from your application based on those two flags.
        glfwPollEvents();

        // Start the Dear ImGui frame
        ImGui_ImplOpenGL2_NewFrame();
        ImGui_ImplGlfw_NewFrame();
        ImGui::NewFrame();

        // 1. Show the big demo window (Most of the sample code is in ImGui::ShowDemoWindow()! You can browse its code to learn more about Dear ImGui!).
        ImGui::SetNextWindowSize(ImVec2(800, 400));

        // center display and also size
        int display_w, display_h;
        glfwGetFramebufferSize(window, &display_w, &display_h);
        

        // Calculate position for centering window
        float window_w = 400;
        float window_h = 200;
        float x = (display_w - window_w) / 2;
        float y = (display_h - window_h) / 2;
        
        showVideoView();

        // if (show_video_info_window) {
        //     ImGui::Begin("Progress");
        //     // float progress = appModel.getProgress() / 100.0;
        //     ImGui::Text("Progress: %.2f%%", progress * 100.0f);
        //     ImGui::ProgressBar(progress, ImVec2(-1, 0), "");
        //     ImGui::End();
        // }

        // Rendering
        ImGui::Render();
        // int display_w, display_h;
        glfwGetFramebufferSize(window, &display_w, &display_h);
        glViewport(0, 0, display_w, display_h);
        glClearColor(clear_color.x * clear_color.w, clear_color.y * clear_color.w, clear_color.z * clear_color.w, clear_color.w);
        glClear(GL_COLOR_BUFFER_BIT);

        ImGui::SetNextWindowPos(ImVec2(x, y));
        ImGui::SetNextWindowSize(ImVec2(window_w, window_h));

        // If you are using this code with non-legacy OpenGL header/contexts (which you should not, prefer using imgui_impl_opengl3.cpp!!),
        // you may need to backup/reset/restore other state, e.g. for current shader using the commented lines below.
        //GLint last_program;
        //glGetIntegerv(GL_CURRENT_PROGRAM, &last_program);
        //glUseProgram(0);
        ImGui_ImplOpenGL2_RenderDrawData(ImGui::GetDrawData());
        //glUseProgram(last_program);

        glfwMakeContextCurrent(window);
        glfwSwapBuffers(window);
    }   
    // Cleanup
    ImGui_ImplOpenGL2_Shutdown();
    ImGui_ImplGlfw_Shutdown();
    ImGui::DestroyContext();

    glfwDestroyWindow(window);
    glfwTerminate();
}

GUI::~GUI() {}

void GUI::updateView(AppModel &appModel) {
    // showDifference(appModel.getCounter());
    // if (appModel.getState() == 2) {
    //     cout << "I'm showing the result in a window:" << appModel.getAnalysisResult() << endl;
    // }
    // if (show_video_info_window) {
        // cout << "Progress: " << appModel.getProgress() << endl;
        // {
        // ImGui::Begin("Progress",  &show_video_info_window);
        // cout << "Progress: " << appModel.getProgress() << endl;
        // {
        // float progress = appModel.getProgress() / 1000.0;
        // // appModel.getProgress();
        // ImGui::Text("Progress: %.2f%%", progress * 100.0f);
        // ImGui::ProgressBar(progress, ImVec2(-1, 0), "");
        // }
        // ImGui::End();
        

    // }
    progress = appModel.getProgress() / 100.0;
}


void GUI::showVideoView() {
    
        // ImGui::Begin("Progress");
        // float progress = appModel->getProgress() / 100.0 + .6;
        // ImGui::Text("Progress: %.2f%%", progress * 100.0f);
        // ImGui::ProgressBar(progress, ImVec2(-1, 0), "");
        // ImGui::End();
    

    vector<Video> allVids;
    static char result[256];
    static char commentResult[256];
    static char link[128];

    {
        ImGui::Begin("Link Processor");
        
        ImGui::InputText("Link", link, 128);
        // vector<Video> allVids;
        if (ImGui::Button("Process")) {
            // if (appModel->getCurrentUser() != nullptr) {
            //     appModel->addVideoToHistoryForCurrentUser(link);
            // }
            // Call the videoManager class to process the link
            VideoManager manager = *appModel->getVideoManager();
            manager.addVideo(link);
            allVids = manager.getVideos();
            // result = "";
            for (const auto & vid : allVids) {
                // result += vid.getTitle();
                CommentSect commentsection=vid.getCommentSect();
                int len = snprintf(result, sizeof(result), "%s", vid.getTitle().c_str());
                len = snprintf(commentResult, sizeof(commentResult), "%s", commentsection.getIntensity().c_str());
            }
            std::cout << result << std::endl;
            std::cout << commentResult << std::endl;
            // Display the results in a separate window
            show_video_info_window = true;
        }
        ImGui::End();
    }
    if (show_video_info_window) {
        
        ImGui::Begin("Video Window", &show_video_info_window);   // Pass a pointer to our bool variable (the window will have a closing button that will clear the bool when clicked)
        {
            // cout << "Progress: " << appModel.getProgress() << endl;
            // // {
            // float progress = appModel.getProgress() / 1000.0;
            // // appModel.getProgress();
            // ImGui::Text("Progress: %.2f%%", progress * 100.0f);
            // ImGui::ProgressBar(progress, ImVec2(-1, 0), "");
            // }
        //     // Show progress bar
        //     ImGui::Begin("Progress");
        //     float progress = 0.3;
            // appModel.getProgress();
        //     ImGui::Text("Progress: %.2f%%", progress * 100.0f);
        //     ImGui::ProgressBar(progress, ImVec2(-1, 0), "");
        //     ImGui::End();
        }
        ImGui::Text("Hello from another window!");
        ImGui::Text(result);
        if (ImGui::Button("Close Me"))
            show_video_info_window = false;
        ImGui::End();
    }
    
}
